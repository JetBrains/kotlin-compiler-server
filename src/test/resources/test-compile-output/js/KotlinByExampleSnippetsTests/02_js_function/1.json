{"jsCode":"//region block: polyfills\n(function () {\n  if (typeof globalThis === 'object')\n    return;\n  Object.defineProperty(Object.prototype, '__magic__', {get: function () {\n    return this;\n  }, configurable: true});\n  __magic__.globalThis = __magic__;\n  delete Object.prototype.__magic__;\n}());\n//endregion\n(function (factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports);\n  else\n    globalThis.playground = factory(typeof playground === 'undefined' ? {} : playground);\n}(function (_) {\n  'use strict';\n  //region block: pre-declaration\n  initMetadataForObject(Unit, 'Unit');\n  initMetadataForClass(BaseOutput, 'BaseOutput');\n  initMetadataForClass(NodeJsOutput, 'NodeJsOutput', VOID, BaseOutput);\n  initMetadataForClass(BufferedOutput, 'BufferedOutput', BufferedOutput, BaseOutput);\n  initMetadataForClass(BufferedOutputToConsoleLog, 'BufferedOutputToConsoleLog', BufferedOutputToConsoleLog, BufferedOutput);\n  //endregion\n  function implement(interfaces) {\n    var maxSize = 1;\n    var masks = [];\n    var inductionVariable = 0;\n    var last = interfaces.length;\n    while (inductionVariable < last) {\n      var i = interfaces[inductionVariable];\n      inductionVariable = inductionVariable + 1 | 0;\n      var currentSize = maxSize;\n      var tmp0_elvis_lhs = i.prototype.$imask$;\n      var imask = tmp0_elvis_lhs == null ? i.$imask$ : tmp0_elvis_lhs;\n      if (!(imask == null)) {\n        masks.push(imask);\n        currentSize = imask.length;\n      }\n      var iid = i.$metadata$.iid;\n      var tmp;\n      if (iid == null) {\n        tmp = null;\n      } else {\n        // Inline function 'kotlin.let' call\n        // Inline function 'kotlin.js.implement.<anonymous>' call\n        tmp = bitMaskWith(iid);\n      }\n      var iidImask = tmp;\n      if (!(iidImask == null)) {\n        masks.push(iidImask);\n        currentSize = Math.max(currentSize, iidImask.length);\n      }\n      if (currentSize > maxSize) {\n        maxSize = currentSize;\n      }\n    }\n    return compositeBitMask(maxSize, masks);\n  }\n  function bitMaskWith(activeBit) {\n    var numberIndex = activeBit >> 5;\n    var intArray = new Int32Array(numberIndex + 1 | 0);\n    var positionInNumber = activeBit & 31;\n    var numberWithSettledBit = 1 << positionInNumber;\n    intArray[numberIndex] = intArray[numberIndex] | numberWithSettledBit;\n    return intArray;\n  }\n  function compositeBitMask(capacity, masks) {\n    var tmp = 0;\n    var tmp_0 = new Int32Array(capacity);\n    while (tmp < capacity) {\n      var tmp_1 = tmp;\n      var result = 0;\n      var inductionVariable = 0;\n      var last = masks.length;\n      while (inductionVariable < last) {\n        var mask = masks[inductionVariable];\n        inductionVariable = inductionVariable + 1 | 0;\n        if (tmp_1 < mask.length) {\n          result = result | mask[tmp_1];\n        }\n      }\n      tmp_0[tmp_1] = result;\n      tmp = tmp + 1 | 0;\n    }\n    return tmp_0;\n  }\n  function defineProp(obj, name, getter, setter) {\n    return Object.defineProperty(obj, name, {configurable: true, get: getter, set: setter});\n  }\n  function objectCreate(proto) {\n    proto = proto === VOID ? null : proto;\n    return Object.create(proto);\n  }\n  function equals(obj1, obj2) {\n    if (obj1 == null) {\n      return obj2 == null;\n    }\n    if (obj2 == null) {\n      return false;\n    }\n    if (typeof obj1 === 'object' && typeof obj1.equals === 'function') {\n      return obj1.equals(obj2);\n    }\n    if (obj1 !== obj1) {\n      return obj2 !== obj2;\n    }\n    if (typeof obj1 === 'number' && typeof obj2 === 'number') {\n      var tmp;\n      if (obj1 === obj2) {\n        var tmp_0;\n        if (obj1 !== 0) {\n          tmp_0 = true;\n        } else {\n          // Inline function 'kotlin.js.asDynamic' call\n          var tmp_1 = 1 / obj1;\n          // Inline function 'kotlin.js.asDynamic' call\n          tmp_0 = tmp_1 === 1 / obj2;\n        }\n        tmp = tmp_0;\n      } else {\n        tmp = false;\n      }\n      return tmp;\n    }\n    return obj1 === obj2;\n  }\n  function protoOf(constructor) {\n    return constructor.prototype;\n  }\n  function createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {\n    var undef = VOID;\n    var iid = kind === 'interface' ? generateInterfaceId() : VOID;\n    return {kind: kind, simpleName: name, associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, $kClass$: undef, defaultConstructor: defaultConstructor, iid: iid};\n  }\n  function generateInterfaceId() {\n    if (globalInterfaceId === VOID) {\n      globalInterfaceId = 0;\n    }\n    // Inline function 'kotlin.js.unsafeCast' call\n    globalInterfaceId = globalInterfaceId + 1 | 0;\n    // Inline function 'kotlin.js.unsafeCast' call\n    return globalInterfaceId;\n  }\n  var globalInterfaceId;\n  function initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {\n    if (!(parent == null)) {\n      ctor.prototype = Object.create(parent.prototype);\n      ctor.prototype.constructor = ctor;\n    }\n    var metadata = createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity);\n    ctor.$metadata$ = metadata;\n    if (!(interfaces == null)) {\n      var receiver = !equals(metadata.iid, VOID) ? ctor : ctor.prototype;\n      receiver.$imask$ = implement(interfaces);\n    }\n  }\n  function initMetadataForClass(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {\n    var kind = 'class';\n    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);\n  }\n  function initMetadataForObject(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {\n    var kind = 'object';\n    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);\n  }\n  function initMetadataForLambda(ctor, parent, interfaces, suspendArity) {\n    initMetadataForClass(ctor, 'Lambda', VOID, parent, interfaces, suspendArity, VOID, VOID);\n  }\n  function initMetadataForCoroutine(ctor, parent, interfaces, suspendArity) {\n    initMetadataForClass(ctor, 'Coroutine', VOID, parent, interfaces, suspendArity, VOID, VOID);\n  }\n  function initMetadataForFunctionReference(ctor, parent, interfaces, suspendArity) {\n    initMetadataForClass(ctor, 'FunctionReference', VOID, parent, interfaces, suspendArity, VOID, VOID);\n  }\n  function initMetadataForCompanion(ctor, parent, interfaces, suspendArity) {\n    initMetadataForObject(ctor, 'Companion', VOID, parent, interfaces, suspendArity, VOID, VOID);\n  }\n  function get_VOID() {\n    _init_properties_void_kt__3zg9as();\n    return VOID;\n  }\n  var VOID;\n  var properties_initialized_void_kt_e4ret2;\n  function _init_properties_void_kt__3zg9as() {\n    if (!properties_initialized_void_kt_e4ret2) {\n      properties_initialized_void_kt_e4ret2 = true;\n      VOID = void 0;\n    }\n  }\n  function Unit() {\n  }\n  protoOf(Unit).toString = function () {\n    return 'kotlin.Unit';\n  };\n  var Unit_instance;\n  function Unit_getInstance() {\n    return Unit_instance;\n  }\n  function get_output() {\n    _init_properties_console_kt__rfg7jv();\n    return output;\n  }\n  var output;\n  function BaseOutput() {\n  }\n  protoOf(BaseOutput).println_uvj9r3_k$ = function () {\n    this.print_o1pwgy_k$('\\n');\n  };\n  protoOf(BaseOutput).println_ghnc0w_k$ = function (message) {\n    this.print_o1pwgy_k$(message);\n    this.println_uvj9r3_k$();\n  };\n  function NodeJsOutput(outputStream) {\n    BaseOutput.call(this);\n    this.outputStream_1 = outputStream;\n  }\n  protoOf(NodeJsOutput).print_o1pwgy_k$ = function (message) {\n    // Inline function 'kotlin.io.String' call\n    var messageString = String(message);\n    this.outputStream_1.write(messageString);\n  };\n  function BufferedOutputToConsoleLog() {\n    BufferedOutput.call(this);\n  }\n  protoOf(BufferedOutputToConsoleLog).print_o1pwgy_k$ = function (message) {\n    // Inline function 'kotlin.io.String' call\n    var s = String(message);\n    // Inline function 'kotlin.text.nativeLastIndexOf' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var i = s.lastIndexOf('\\n', 0);\n    if (i >= 0) {\n      var tmp = this;\n      var tmp_0 = this.buffer_1;\n      // Inline function 'kotlin.text.substring' call\n      // Inline function 'kotlin.js.asDynamic' call\n      tmp.buffer_1 = tmp_0 + s.substring(0, i);\n      this.flush_shahbo_k$();\n      var tmp6 = s;\n      // Inline function 'kotlin.text.substring' call\n      var startIndex = i + 1 | 0;\n      // Inline function 'kotlin.js.asDynamic' call\n      s = tmp6.substring(startIndex);\n    }\n    this.buffer_1 = this.buffer_1 + s;\n  };\n  protoOf(BufferedOutputToConsoleLog).flush_shahbo_k$ = function () {\n    console.log(this.buffer_1);\n    this.buffer_1 = '';\n  };\n  function BufferedOutput() {\n    BaseOutput.call(this);\n    this.buffer_1 = '';\n  }\n  protoOf(BufferedOutput).print_o1pwgy_k$ = function (message) {\n    var tmp = this;\n    var tmp_0 = this.buffer_1;\n    // Inline function 'kotlin.io.String' call\n    tmp.buffer_1 = tmp_0 + String(message);\n  };\n  function println(message) {\n    _init_properties_console_kt__rfg7jv();\n    get_output().println_ghnc0w_k$(message);\n  }\n  var properties_initialized_console_kt_gll9dl;\n  function _init_properties_console_kt__rfg7jv() {\n    if (!properties_initialized_console_kt_gll9dl) {\n      properties_initialized_console_kt_gll9dl = true;\n      // Inline function 'kotlin.run' call\n      // Inline function 'kotlin.io.output.<anonymous>' call\n      var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;\n      output = isNode ? new NodeJsOutput(process.stdout) : new BufferedOutputToConsoleLog();\n    }\n  }\n  function main() {\n    var json = {};\n    json.name = 'Jane';\n    json.hobby = 'movies';\n    println(JSON.stringify(json));\n  }\n  function mainWrapper() {\n    main();\n  }\n  //region block: init\n  Unit_instance = new Unit();\n  //endregion\nif (typeof get_output !== \"undefined\") {\n  get_output();\n  output = new BufferedOutput();\n  _.output = get_output();\n}\n  mainWrapper();\n  return _;\n}));\nplayground.output?.buffer_1;\n\n","exception":null,"errors":{"File.kt":[]},"text":""}